#ifndef GRAPHEXPERIMENT_GRAPHALGORITHMS_H
#define GRAPHEXPERIMENT_GRAPHALGORITHMS_H

#include <iomanip>
#include <vector>
#include <string>
#include <iostream>
#include <set>
#include <cstring>
#include <algorithm>

using std::cin;
using std::cout;
using std::vector;
using std::endl;
using std::sort;
using std::string;
using std::to_string;
using std::setw;
using std::left;
using std::pair;
using std::set;

    const int INF = 2'147'483'646;

    // àçìåð ìàòðèöû, îò íåãî çàâèñßò âñå ôóêíöèè, åñëè ÷òî-òî áóäåò íå ðàáîòàòü,
    // òî âîçìîæíî íå òî çíà÷åíèå ïàðàìåòðà óêàçàíî, íó èëè ýòî óæå ìîèõ ðóê äåëî...
    const int SIZE = 5;

    // 1
    // dijkstra_algorithm - îáßçàòåëüíî ïðèíèìàåò ìàòðèöó âåñîâ ðåáåð, èíäåêñ íà÷àëüíîé âåðøèíû, èíäåêñ êîíå÷íîé âåðøèíû.
    // î æåëàíèþ, ïîñëåäíèì â ïàðàìåòðå 0 óêàçàòü, ÷òîáû âûâåñòè èíôîðìàöèþ ïðî âñå âåðøèíû, èíà÷å âûâåäåòñß òîëüêî ðàññòîßíèå äî êîíå÷íîé òî÷êè
    // å ðàáîòàåò ñ îòðèöàòåëüíûìè âåñàìè âåðøèí
    // ñòü ìíîãî ðåàëèçàöèé, êîòîðûå çàâèñßò îò ïðåäïî÷òèòåëüíîé ñòðóêòóðû äàííûõ.
    void dijkstra_algorithm(vector <vector <int>> &W, const int &start, const int &end_node);


    // 2
    // ëãîðèòì ëîéäà-îðøåëëà - ýòî àëãîðèòì íàõîæäåíèß êðàò÷àéøèõ ïóòåé âî âñåõ âåðøèíàõ ãðàôà,
    // äàæå åñëè ãðàô ñîäåðæèò îòðèöàòåëüíûå âåñà ðÞáåð.
    // à âõîä ïîäàåòñß ãðàô â âèäå ìàòðèöû ñìåæíîñòè.
    void floydWarshall(vector<vector<int>>& graph);

    // 3
    // greedyColoring - ïðèíèìàåò ìàòðèöó âåñîâ ðåáåð, à òàêæå ðàçìåð ìàòðèöû, êîòîðûé èìååò çíà÷åíèå êîëè÷åñòâà âåðøèí/óçëîâ ãðàôà,
    // âûâîäèò îëè÷åñòâî èñïîëüçîâàííûõ öâåòîâ.
    void greedyColoring(vector <vector <int>>& W);

    // 4
    // Prim - ïðèíèìàåò ìàòðèöó âåñîâ ðåáåð, âîçâðàùàåò åå èç ôóíêöèè
    // ëãîðèòì îòíîñèòñß ê æàäíûì.
    // ëãîðèòì ðèìà îáû÷íî ðàáîòàåò áûñòðåå íà ïëîòíûõ ãðàôàõ, â êîòîðûõ êîëè÷åñòâî ðÞáåð áëèçêî ê êâàäðàòó ÷èñëà âåðøèí.
    // òî ñâßçàíî ñ òåì, ÷òî íà êàæäîì øàãå àëãîðèòìà íóæíî ðàññìàòðèâàòü òîëüêî íåáîëüøîå êîëè÷åñòâî ðÞáåð,
    // ÷òî äåëàåò åãî ýôôåêòèâíûì íà ïëîòíûõ ãðàôàõ.
    // Cëîæíîñòü O(E*log(V), ãäå E - êîë-âî ðåáåð, à V - êîë-âî âåðøèí ïðè èñïîëüçîâàíèè äëß õðàíåíèß êó÷è ñ ïðèîðèòåòîì
    vector <vector<int>> Prim(vector <vector <int>> &W);


    // 5
    // óíêöèè äëß ðåàëèçàöèè àëãîðèòìà ðàñêàëà
    // : íà âõîä ïîäàåòñß ñïèñîê ðåáåð è êîëè÷åñòâî ðåáåð.
    // ëß ïåðåâîäà â óäîáîâàðèìûé âèä ïðèìåíèòå ôóíêöèþ graphToEdges,
    // ïåðåäàâ â íåå ãðàô â âèäå ìàòðèöû ñìåæíîñòè.
    // ñîáåííîñòü â òîì, ÷òî îí êîððåêòíî îáðàáàòûâàåò ãðàôû ñ öèêëè÷åñêèìè ïîäãðàôàìè.
    // ëîæíîñòü âûïîëíåíèß: ëãîðèòì ðàñêàëà èìååò âðåìåííóþ ñëîæíîñòü O(E*log(E))
    // E - êîëè÷åñòâî ðÞáåð â ãðàôå. òî äåëàåò åãî ýôôåêòèâíûì äëß áîëüøèõ ãðàôîâ ñ áîëüøèì êîëè÷åñòâîì ðÞáåð.
    void Kruskal(vector<vector<int>>& edges, int V);
    // óíêöèß äëß îáúåäèíåíèß äâóõ ïîäìíîæåñòâ â îäíî
    void Union(vector<int>& parent, vector<int>& rank, int x, int y);
    vector<vector<int>> graphToEdges(vector<vector<int>>& graph);
    // óíêöèß äëß íàõîæäåíèß êîðíß ïîäìíîæåñòâà (äëß îïòèìèçàöèè)
    int find(vector<int>& parent, int i);

    // 6
    // ëãîðèòì îðóâêè ðàáîòàåò ïóòåì ìíîãîêðàòíîãî îáúåäèíåíèß êîìïîíåíò ñâßçíîñòè ãðàôà.
    // à êàæäîé èòåðàöèè àëãîðèòìà äëß êàæäîé êîìïîíåíòû âûáèðàåòñß ìèíèìàëüíîå ðåáðî, è ýòè ðÞáðà îáúåäèíßþò êîìïîíåíòû.
    // òîò ïðîöåññ ïðîäîëæàåòñß, ïîêà íå îñòàíåòñß îäíà êîìïîíåíòà, ò.å. ïîêà íå áóäåò ïîñòðîåíî ìèíèìàëüíîå îñòîâíîå äåðåâî.
    // ëãîðèòì îðóâêè ëåãêî ïàðàëëåëèçóåì. à êàæäîì øàãå àëãîðèòìà ìîæíî íåçàâèñèìî îáðàáàòûâàòü êàæäóþ êîìïîíåíòó ñâßçíîñòèè âûáèðàòü ìèíèìàëüíîå ðåáðî äëß êàæäîé èç íèõ.
    // òî äåëàåò àëãîðèòì îðóâêè ýôôåêòèâíûì äëß ïàðàëëåëüíîé ðåàëèçàöèè íà ìíîãîïðîöåññîðíûõ è ìíîãîïîòî÷íûõ ñèñòåìàõ.
    // ëãîðèòì îðóâêè îñîáåííî ïîäõîäèò äëß ðàáîòû ñ ðàçðåæåííûìè ãðàôàìè, â êîòîðûõ êîëè÷åñòâî ðÞáåð çíà÷èòåëüíî ìåíüøå,
    // ÷åì êîëè÷åñòâî âåðøèí.  òàêèõ ãðàôàõ îí ìîæåò ðàáîòàòü áîëåå ýôôåêòèâíî, ÷åì àëãîðèòìû, îñíîâàííûå íà ñîðòèðîâêå ðÞáåð.
    // ëîæíîñòü O(E*log(V), ãäå E - êîë-âî ðåáåð, à V - êîë-âî âåðøèí
    void Boruvka(vector<pair<pair<int, int>, int>>& edges, int V);


#endif //GRAPHEXPERIMENT_GRAPHALGORITHMS_H